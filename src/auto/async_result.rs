// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio_sys;
use glib;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib_wrapper! {
    pub struct AsyncResult(Interface<gio_sys::GAsyncResult>);

    match fn {
        get_type => || gio_sys::g_async_result_get_type(),
    }
}

pub const NONE_ASYNC_RESULT: Option<&AsyncResult> = None;

pub trait AsyncResultExt: 'static {
    fn get_source_object(&self) -> Option<glib::Object>;

    //fn get_user_data(&self) -> /*Unimplemented*/Option<Fundamental: Pointer>;

    //fn is_tagged(&self, source_tag: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool;

    fn legacy_propagate_error(&self) -> Result<(), glib::Error>;
}

impl<O: IsA<AsyncResult>> AsyncResultExt for O {
    fn get_source_object(&self) -> Option<glib::Object> {
        unsafe {
            from_glib_full(gio_sys::g_async_result_get_source_object(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn get_user_data(&self) -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call gio_sys:g_async_result_get_user_data() }
    //}

    //fn is_tagged(&self, source_tag: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool {
    //    unsafe { TODO: call gio_sys:g_async_result_is_tagged() }
    //}

    fn legacy_propagate_error(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gio_sys::g_async_result_legacy_propagate_error(
                self.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl fmt::Display for AsyncResult {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AsyncResult")
    }
}
